{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/remove-falsy-values-from-an-array","result":{"data":{"markdownRemark":{"html":"<h1>Remove falsy values from an array</h1>\n<h3>First, what is a falsy (or falsy) value?</h3>\n<p>When we talk about falsy and truthy values, we just speak about the property of each value to be evaluated, in a boolean context, as a true or as a false. So, a value is truthy when is evaluated as true, and a value is falsy when is evaluated as false.</p>\n<h3>So, in this point, which values are falsy in Javascript?</h3>\n<p>There are six different values are always falsy. They are: <code class=\"language-text\">false, null, 0, '', undefined, NaN</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testTruthyOrFalsy</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> val <span class=\"token operator\">?</span> <span class=\"token string\">'truthy'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'falsy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">testTruthyOrFalsy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// falsy</span>\n<span class=\"token function\">testTruthyOrFalsy</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// falsy</span>\n<span class=\"token function\">testTruthyOrFalsy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// falsy</span>\n<span class=\"token function\">testTruthyOrFalsy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// falsy</span>\n<span class=\"token function\">testTruthyOrFalsy</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// falsy</span></code></pre></div>\n<p>Every other value will be truthy in Javascript.</p>\n<h3>Ok, I got this, show me the good stuffs</h3>\n<p>Well, how can we use this information in real world, in our day by day? It is common to find arrays that have elements we don't need, usually falsy elements, and we need to remove them, and now we can see different ways we can do this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dirtyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'thirteen'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'symbol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> falseyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>- First Method => Boolean() function</h4>\n<p>In this case, we just transform every element of the array to <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstMethod</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span> <span class=\"token operator\">=></span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// another easy way to write it</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sameFirstMethod</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">firstMethod</span><span class=\"token punctuation\">(</span>dirtyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  => [ 1, 'one', 2, 3, true, '5', 8, 'thirteen', Symbol(symbol) ]</span>\n<span class=\"token function\">firstMethod</span><span class=\"token punctuation\">(</span>falseyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => []</span></code></pre></div>\n<h4>- Second Method => !! operator</h4>\n<p>This Method is same as the previous one, but with a different sintaxis.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">secondMethod</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">secondMethod</span><span class=\"token punctuation\">(</span>dirtyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  => [ 1, 'one', 2, 3, true, '5', 8, 'thirteen', Symbol(symbol) ]</span>\n<span class=\"token function\">secondMethod</span><span class=\"token punctuation\">(</span>falseyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => []</span></code></pre></div>\n<h4>- Third Method => elem itself</h4>\n<p>For this Method, the filter method makes the same thing: evaluate if every element from the array is tru or not.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">thirdMethod</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span> <span class=\"token operator\">=></span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">thirdMethod</span><span class=\"token punctuation\">(</span>dirtyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  => [ 1, 'one', 2, 3, true, '5', 8, 'thirteen', Symbol(symbol) ]</span>\n<span class=\"token function\">thirdMethod</span><span class=\"token punctuation\">(</span>falseyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => []</span></code></pre></div>\n<h3>But all that glitters is not gold</h3>\n<p>Despite of the ease of these methods, we have to be careful with another values because they could be false friends. I introduce you them.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> areFalsyOrNotArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">firstMethod</span><span class=\"token punctuation\">(</span>areFalsyOrNotArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  => [ '0', 'false', [], {}, [Function] ];</span>\n<span class=\"token function\">secondMethod</span><span class=\"token punctuation\">(</span>areFalsyOrNotArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  => [ '0', 'false', [], {}, [Function] ];</span>\n<span class=\"token function\">thirdMethod</span><span class=\"token punctuation\">(</span>areFalsyOrNotArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  => [ '0', 'false', [], {}, [Function] ];</span></code></pre></div>\n<p>Actually, they have a little weird behaviour, because when empty objects or arrays are compared to a boolean, we have this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code runs</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code also runs</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code doesn't run</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code also doesn't run</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code doesn´t run</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// just this code runs</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code doesn't run</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this code also doesn't run</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>So, if you need to get rid of these empty stuffs, you will need to add some little logic to your method.</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://www.sitepoint.com/javascript-truthy-falsy/\">Truthy and Falsy: When All is Not Equal in JavaScript</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">Falsy values</a></li>\n<li><a href=\"https://www.techiedelight.com/remove-all-falsy-values-from-an-array-in-javascript/\">Remove all falsy values from an array</a></li>\n<li><a href=\"https://www.nfriedly.com/techblog/2009/07/advanced-javascript-operators-and-truthy-falsy/\">Advanced Javascript: Logical Operators and truthy / falsy</a></li>\n</ul>","frontmatter":{"date":"August 17, 2020","slug":"/pill/remove-falsy-values-from-an-array","title":"Remove falsy values from an array","author":""}}},"pageContext":{"slug":"/pill/remove-falsy-values-from-an-array"}},"staticQueryHashes":["2744294623","63159454"]}