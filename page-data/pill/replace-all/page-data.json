{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/replace-all","result":{"data":{"markdownRemark":{"html":"<h1>Replace all</h1>\n<p>We're presenting several ways to replace all the occurrences of a substring within a string in Javascript.</p>\n<h2><code class=\"language-text\">.replace()</code> only replaces the first occurrence!!</h2>\n<details><summary>spoiler</summary>\nIt's usual that the first time you tried to replace a substring inside a string you use `.replace()`:\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'To be or not to be, that is the question'</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CODE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">></span> <span class=\"token string\">'To CODE or not to be, that is the question'</span></code></pre></div>\n</details>\n<h2>Use a loop</h2>\n<details><summary>spoiler</summary>\nAs you can see, when we use the replace method, only the first occurrence is replaced... and nope, there are no hidden parameters on this function to change this behavior.\n<p>A first approach to solve this issue is to use a loop. We could call the replace method as many times as needed until all the occurrences are replaced:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'To be or not to be, that is the question'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'be'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CODE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token string\">'To CODE or not to CODE, that is the question'</span></code></pre></div>\n<p>The loop solves the issue, but... it's a loop and we need to mutate the string to check we need to stop or not. Not very fancy.</p>\n</details>\n<h2>One-liner non-mutating solution</h2>\n<details><summary>spoiler</summary>\nIf you wanted a one-liner solution, I've seen things like that in the Internet. It seems smart but its performance is poor:\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"To be or not to be, that is the question\"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"be\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CODE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token string\">\"To CODE or not to CODE, that is the question\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n</details>\n<h2>RegExp to the help</h2>\n<details><summary>spoiler</summary>\nSo, the Regular Expressions can help us here.\nA one-liner smart solution for this issue is to use them. So we can, instead of trying to replace the string 'be', use a RegEx with be to do it: `/be/`\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"To be or not to be, that is the question\"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">be</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CODE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token string\">\"To CODE or not to be, that is the question\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Wait a minute! This didn't work...</p>\n</details>\n<details><summary>spoiler</summary>\nWell, we have to know how RegExs work. We are missing the `g` modifier for globally in the RegEx, without it, the replace will work the same way it did with the string.\n<p>But if we use the RegEx properly, this behavior will change for good:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"To be or not to be, that is the question\"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">be</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CODE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token string\">\"To CODE or not to CODE, that is the question\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here, the key was using the <code class=\"language-text\">g</code> modifier: <code class=\"language-text\">/be/g</code></p>\n</details>\n<h2>The future</h2>\n<details><summary>spoiler</summary>\nFrom August 2020 we have a new fresh alternative for replacing all the occurrences: Yes, a native method call `.replaceAll()` !!\n<p>This method works just as expected:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"To be or not to be, that is the question\"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"be\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CODE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token string\">\"To CODE or not to CODE, that is the question\"</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/be/g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CODE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span>\n  <span class=\"token string\">\"To CODE or not to CODE, that is the question\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>üö´üö´üö´üö´ But this method is not implemented for all browsers <em>or even Node.js</em> yet üò±üò±üò±.</p>\n<p>Please, check the compatibility chart.</p>\n</details>\n<h2>Browser compatibility üîå</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>‚ö†Ô∏è</th>\n<th>‚úÖ</th>\n<th>‚úÖ</th>\n<th>‚úÖ</th>\n<th>‚úÖ</th>\n<th>‚úÖ</th>\n<th>‚úÖ</th>\n<th>‚ö†Ô∏è</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>üíª</td>\n<td>IE</td>\n<td>Edge</td>\n<td>Firefox</td>\n<td>Chrome</td>\n<td>Safari</td>\n<td>Opera</td>\n<td>Node.js</td>\n<td>Android Browser</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">replace</a></td>\n<td>9</td>\n<td>12</td>\n<td>2</td>\n<td>4</td>\n<td>3.1</td>\n<td>10</td>\n<td>0.1.100</td>\n<td>2.1</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\">replaceAll</a></td>\n<td>-</td>\n<td>85</td>\n<td>77</td>\n<td>85</td>\n<td>13.1</td>\n<td>71</td>\n<td>- üò±üò±</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2>Resources</h2>","frontmatter":{"date":"January 16, 2021","slug":"/pill/replace-all","title":"Replace all","author":""}}},"pageContext":{"slug":"/pill/replace-all"}},"staticQueryHashes":["2744294623","63159454"]}