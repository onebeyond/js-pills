{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/check-variables-with-and-operator","result":{"data":{"markdownRemark":{"html":"<h3>Check variables with &#x26;&#x26; (and the new ?. operator)</h3>\n<h3>Remainding main <em>falsy</em> values</h3>\n<p>In JavaScript, the following expressions that are always false (converted to false):</p>\n<ul>\n<li><code class=\"language-text\">null</code></li>\n<li><code class=\"language-text\">undefined</code></li>\n<li><code class=\"language-text\">NaN</code></li>\n<li><code class=\"language-text\">0</code></li>\n<li><code class=\"language-text\">\"\"</code> (empty string)</li>\n</ul>\n<p>More details about <em>falsy</em> and <em>truthy</em> values on <strong><a href=\"../using-!!operator/README.md\">JSPill Converting to boolean using <code class=\"language-text\">!!</code> operator</a></strong></p>\n<h3>What is the &#x26;&#x26; operator?</h3>\n<p>The <code class=\"language-text\">&amp;&amp;</code> (AND) operator is one of the four logical operators in Javascript. Despite of being called <em>logical</em>, they can be applied to values of any type, and their result can also be of any type.</p>\n<p>It is commonly used in conditional expressions like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wantToLearn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jsPill <span class=\"token operator\">=</span> <span class=\"token string\">'check variables with &amp;&amp;'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wantToLearn <span class=\"token operator\">&amp;&amp;</span> jsPill<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// returns true if both operands are truthy, false otherwise</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'We want to learn how to use the &amp;&amp; operator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, it has a more powerful usage in Javascript: <strong>the short circuit evaluation</strong></p>\n<h3>Short circuit evaluation</h3>\n<h4>How does it work when checking variables?</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> val1 <span class=\"token operator\">&amp;&amp;</span> val2 <span class=\"token operator\">&amp;&amp;</span> val3<span class=\"token punctuation\">;</span></code></pre></div>\n<p>When a condition evaluates to <code class=\"language-text\">false</code>, the following conditions are not evaluated. In other words, the expression is evaluated until we get one <code class=\"language-text\">false</code> result (the result will be always <code class=\"language-text\">false</code> from this point).</p>\n<p>This is how it works in detail:</p>\n<ol>\n<li>The evaluation starts from left to right</li>\n<li>All operands are converted to boolean, and if the result is <code class=\"language-text\">false</code>, stops and returns the original value of the operand</li>\n<li>If all the oprenads are evaluated (i.e. all were truthy), returns the last operand</li>\n</ol>\n<p><strong>Summary: the expression is evaluated from left to right until the results of the remaining condition is not going to affect the already evaluated result.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value1 = null</span>\n\n<span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value2 = 3</span></code></pre></div>\n<h4>Other use cases</h4>\n<p>Before ES2020, we could avoid invalid references issues using the short circuit evaluation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">externalSystems</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">system1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'604b2f9d5ed27d3cbe4e4028'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">timestamps</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">created</span><span class=\"token operator\">:</span> <span class=\"token string\">'2021-10-22T06:31:39.989Z'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> productSystem2Id <span class=\"token operator\">=</span>\n  product1<span class=\"token punctuation\">.</span>externalSystems <span class=\"token operator\">&amp;&amp;</span>\n  product1<span class=\"token punctuation\">.</span>externalSystems<span class=\"token punctuation\">.</span>system2 <span class=\"token operator\">&amp;&amp;</span>\n  product1<span class=\"token punctuation\">.</span>externalSystems<span class=\"token punctuation\">.</span>system2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// productSystem2Id = undefined</span></code></pre></div>\n<p>With the new <code class=\"language-text\">Optional Chaining</code> operator <code class=\"language-text\">?.</code>, we don't need to use short circuit evaluation to prevent invalid refereces since if the reference does not exist, it will not access to its properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> productSystem2Id <span class=\"token operator\">=</span> product1<span class=\"token punctuation\">.</span>externalSystems<span class=\"token operator\">?.</span>system2<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Same result as above example. returns undefined since there is no system2</span></code></pre></div>\n<p>It can also be used with arrays and functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>val<span class=\"token operator\">?.</span>prop<span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>val<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>arr<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>func<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Tip of the day: Conditionally adding keys to objects</h3>\n<p>We may use a combiation of <code class=\"language-text\">&amp;&amp;</code> and <code class=\"language-text\">...</code> (spread operator)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jonh'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addEmail <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addId <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>user<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>addEmail <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'john@email.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>addId <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'604b2f9d5ed27d3cbe4e4028'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// obj = {name: 'John', age: 28, email: 'john@email.com' }</span></code></pre></div>\n<h3>Resource</h3>\n<ul>\n<li><a href=\"https://javascript.info/logical-operators\">Javascript.info: Logical operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Mozilla Org: Logical AND (&#x26;&#x26;)</a></li>\n<li><a href=\"https://dev.to/akhil_001/short-circuit-evaluation-in-javascript-3o5a\">Akhil sai: Short-circuit evaluation in Javascript</a></li>\n<li><a href=\"https://medium.com/@codejockie/javascript-short-circuit-evaluation-b81cb493d992\">John C. Kennedy: JavaScript Short-Circuit Evaluation</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/javascript-short-circuiting/\">GeeksforGeeks: Javascript Short circuiting operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Mozilla Org: Optional chaining (?.)</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/javascript-new-features-es2020/\">Mehul Mohan: 10 New JavaScript Features in ES2020 That You Should Know</a></li>\n<li><a href=\"https://amberley.dev/blog/2020-09-07-conditionally-add-to-array-or-obj/\">Amberley Romo: Conditionally Add to an Object or Array in JavaScript</a></li>\n<li><a href=\"https://medium.com/@mikeh91/conditionally-adding-keys-to-javascript-objects-using-spread-operators-and-short-circuit-evaluation-acf157488ede\">Michael Harrison: Conditionally adding keys to JavaScript objects using spread operators and short-circuit evaluation</a></li>\n</ul>","frontmatter":{"date":"October 22, 2021","slug":"/pill/check-variables-with-and-operator","title":"Check variables with && (and the new ?. operator)","author":"David Miguel Yusta"}}},"pageContext":{"slug":"/pill/check-variables-with-and-operator"}},"staticQueryHashes":["2744294623","63159454"]}