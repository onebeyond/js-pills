{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/short-circuit-conditionals","result":{"data":{"markdownRemark":{"html":"<h3>short-circuit-conditionals / evaluation</h3>\n<h4>Remainding main \"falsy\" values</h4>\n<p>In JavaScript, the following expressions that are always false (converted to false):</p>\n<ul>\n<li><code class=\"language-text\">null</code></li>\n<li><code class=\"language-text\">undefined</code></li>\n<li><code class=\"language-text\">NaN</code></li>\n<li><code class=\"language-text\">0</code></li>\n<li>empty string</li>\n</ul>\n<p>More details about \"falsy\" and \"truthy\" values on <strong><a href=\"../using-!!operator/README.md\">JSPill Converting to boolean using <code class=\"language-text\">!!</code> operator</a></strong></p>\n<h4>How does it work?</h4>\n<p>Logical operators handle operands of different types converting them to Boolean</p>\n<ol>\n<li>The evaluation starts from left to right</li>\n<li>The value in the left side is converted to Boolean</li>\n<li>Then it is decided what to return: either the original left side value or the right side value (the evaluation process may start again)</li>\n</ol>\n<p><strong>Summary: the expression is evaluated from left to right until the results of the remaining condition is not going to affect the already evaluated resutl.</strong></p>\n<h3>Short-circuit with logical AND (<code class=\"language-text\">&amp;&amp;</code>)</h3>\n<p>When a condition evaluates to <code class=\"language-text\">false</code>, the following conditions are not evaluated. In other words, the expression is evaluated until we get one <code class=\"language-text\">false</code> result (the result will be always <code class=\"language-text\">false</code> from this point).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> john <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasMoney</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dressCode</span><span class=\"token operator\">:</span> <span class=\"token string\">'informal'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasMoney</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dressCode</span><span class=\"token operator\">:</span> <span class=\"token string\">'formal'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> allowClubEntranceJohn <span class=\"token operator\">=</span>\n  john<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;&amp;</span> john<span class=\"token punctuation\">.</span>hasMoney <span class=\"token operator\">&amp;&amp;</span> john<span class=\"token punctuation\">.</span>dressCode <span class=\"token operator\">===</span> <span class=\"token string\">'formal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false due to hasMoney being false. dressCode is not evaluated</span>\n\n<span class=\"token keyword\">const</span> allowClubEntranceJane <span class=\"token operator\">=</span>\n  jane<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;&amp;</span> jane<span class=\"token punctuation\">.</span>hasMoney <span class=\"token operator\">&amp;&amp;</span> jane<span class=\"token punctuation\">.</span>dressCode <span class=\"token operator\">===</span> <span class=\"token string\">'formal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true. All expressions are evaluated to true</span></code></pre></div>\n<h3>Short-circuit with logical OR (<code class=\"language-text\">||</code>)</h3>\n<p>When a condition evalutes to <code class=\"language-text\">true</code>, the remaining conditions are not evaluated. To put it another way, the expression is evaluated until we get a <code class=\"language-text\">true</code> result because the result will be always <code class=\"language-text\">true</code> onwards, no matter the result of further conditions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> john <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasMoney</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dressCode</span><span class=\"token operator\">:</span> <span class=\"token string\">'formal'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hasMoney</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dressCode</span><span class=\"token operator\">:</span> <span class=\"token string\">'informal'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> allowClubEntranceJohn <span class=\"token operator\">=</span>\n  john<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span> <span class=\"token operator\">||</span> john<span class=\"token punctuation\">.</span>hasMoney <span class=\"token operator\">||</span> john<span class=\"token punctuation\">.</span>dressCode <span class=\"token operator\">===</span> <span class=\"token string\">'formal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true due to hasMoney being true. dressCode is not evaluated</span>\n\n<span class=\"token keyword\">const</span> allowClubEntranceJane <span class=\"token operator\">=</span>\n  jane<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span> <span class=\"token operator\">||</span> jane<span class=\"token punctuation\">.</span>hasMoney <span class=\"token operator\">||</span> jane<span class=\"token punctuation\">.</span>dressCode <span class=\"token operator\">===</span> <span class=\"token string\">'formal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false because all expressions are evaluated to false</span></code></pre></div>\n<h3>Other use cases</h3>\n<p>Before ES2020, we could avoid invalid references issues using the short circuit evaluation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> john <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">bankDetails</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'604b2f9d5ed27d3cbe4e4028'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> jane <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> johnBankId <span class=\"token operator\">=</span> john<span class=\"token punctuation\">.</span>bankDetails <span class=\"token operator\">&amp;&amp;</span> john<span class=\"token punctuation\">.</span>bankDetails<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns 604b2f9d5ed27d3cbe4e4028</span>\n\n<span class=\"token keyword\">const</span> janeBankId <span class=\"token operator\">=</span> jane<span class=\"token punctuation\">.</span>bankDetails <span class=\"token operator\">&amp;&amp;</span> jane<span class=\"token punctuation\">.</span>bankDetails<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns undefined since there is no bankDetails property on the jane object, avoiding invalid reference</span></code></pre></div>\n<p>With the new <code class=\"language-text\">Optional Chaining</code> operator <code class=\"language-text\">?.</code>, we don't need to use short circuit evaluation to prevent invalid refereces since if the reference does not exist, it will not access to its properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> janeBankId <span class=\"token operator\">=</span> jane<span class=\"token punctuation\">.</span>bankDetails<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Same result as above example. returns undefined since there is no bankDetails property on</span>\n<span class=\"token comment\">// the anotherPerson object, avoiding invalid reference</span></code></pre></div>\n<h3>Resource</h3>\n<ul>\n<li><a href=\"https://dev.to/akhil_001/short-circuit-evaluation-in-javascript-3o5a\">Akhil sai: Short-circuit evaluation in Javascript</a></li>\n<li><a href=\"https://medium.com/@codejockie/javascript-short-circuit-evaluation-b81cb493d992\">John C. Kennedy: JavaScript Short-Circuit Evaluation</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/javascript-short-circuiting/\">GeeksforGeeks: Javascript Short circuiting operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Mozilla Org: Logical AND (&#x26;&#x26;)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Mozilla Org: Logical OR (||)</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/javascript-new-features-es2020/\">Mehul Mohan: 10 New JavaScript Features in ES2020 That You Should Know</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Mozilla Org: Optional chaining (?.)</a></li>\n</ul>","frontmatter":{"date":"March 12, 2021","slug":"/pill/short-circuit-conditionals","title":"Short circuit conditionals","author":"David Miguel Yusta"}}},"pageContext":{"slug":"/pill/short-circuit-conditionals"}},"staticQueryHashes":["2744294623","63159454"]}