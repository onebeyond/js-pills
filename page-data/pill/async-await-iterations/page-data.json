{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/async-await-iterations","result":{"data":{"markdownRemark":{"html":"<h3>Async Await iterations</h3>\n<p>Do you want to make asynchronous request sequentially? Using async await can be tricky. Let's see why.</p>\n<h3>The bad way (synchronous loop)</h3>\n<p>Let's do a dummy example let's say we want to get the quotes for a bunch of tokens y a crypto market.</p>\n<p>If we run await in a regular forEach loop you will get the results of your request in random order since forEach only supports synchronous functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlApi <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.binance.com/api/v3/ticker/price?symbol='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pairs <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'BTCUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ETHUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NEOUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XRPUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DAIUSDT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\npairs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">symbol</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>urlApi<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>symbol<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start Fetching Prices'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Same happens with the classic imperative for loop, will not reproduce the example since I confident you already got the point.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do something with item</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The while Way</h3>\n<p>We can run async functions sequentially inside an array</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlApi <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.binance.com/api/v3/ticker/price?symbol='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pairs <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'BTCUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ETHUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NEOUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XRPUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DAIUSDT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPricesSync</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pairs<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> symbol <span class=\"token operator\">=</span> pairs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>symbol<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getPricesSync</span><span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">,</span> urlApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>The for of way</h3>\n<p>The classic for of to the rescue. For of can run both synchronous and asynchronous functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlApi <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.binance.com/api/v3/ticker/price?symbol='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pairs <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'BTCUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ETHUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NEOUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XRPUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DAIUSDT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPricesSync</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pairs<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> symbol <span class=\"token keyword\">of</span> pairs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>urlApi<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>symbol<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getPricesSync</span><span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">,</span> urlApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>The for await way</h3>\n<p>Similar for of case when we want to loop an array of promises sequentially.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlApi <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.binance.com/api/v3/ticker/price?symbol='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pairs <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'BTCUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ETHUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'NEOUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'XRPUSDT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DAIUSDT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pairsPromises <span class=\"token operator\">=</span> pairs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">symbol</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>urlApi<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>symbol<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPricesSync</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> result <span class=\"token keyword\">of</span> promises<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getPricesSync</span><span class=\"token punctuation\">(</span>pairsPromises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Bonus</h3>\n<p>There are still some awaits that can be used in other iterations as \"map\", \"filter\", \"reduce\" but this is for another pill since some won't work and other can with some workarounds.</p>\n<h3>References</h3>\n<p><a href=\"https://zellwk.com/blog/async-await-in-loops/\">https://zellwk.com/blog/async-await-in-loops/</a>s</p>","frontmatter":{"date":"December 14, 2020","slug":"/pill/async-await-iterations","title":"Async Await iterations","author":""}}},"pageContext":{"slug":"/pill/async-await-iterations"}},"staticQueryHashes":["2744294623","63159454"]}