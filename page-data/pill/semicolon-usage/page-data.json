{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/semicolon-usage","result":{"data":{"markdownRemark":{"html":"<h1>Semicolon Usage</h1>\n<p>Semicolons <code class=\"language-text\">;</code> are not required in JavaScript. The following code is a valid JavaScript code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> hello\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is because JavaScript has a feature called <strong>Automatic Semicolon Insertion</strong> aka ASI.<br>\nASI puts semicolons in your JavaScript for you. It’s a part of the language and can not be disabled, it's always active.</p>\n<p>ASI has a set of rules to insert semicolons. If there is already a semicolon, it won’t change anything.</p>\n<p>Our previous code will be transformed into this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;-- ASI</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> hello<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// &lt;-- ASI</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, this source</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token function\">c</span>\n<span class=\"token punctuation\">(</span> d <span class=\"token operator\">+</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>is not transformed, because the expression that begins the second line can be interpreted as an argument\nlist for a function call:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span> d <span class=\"token operator\">+</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2>Rules of ASI</h2>\n<p>The JavaScript parser will automatically add a semicolon when, during the parsing of the source code when:</p>\n<p>1 - The next line starts with a <code class=\"language-text\">}</code>, closing the current block.<br>\n2 - There is a <code class=\"language-text\">return</code>, <code class=\"language-text\">break</code>, <code class=\"language-text\">throw</code> or <code class=\"language-text\">continue</code> statement on its own line.<br>\n3 - The end of the source code file is reached.</p>\n<p>What does the following function return?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You forgot to put a semicolon, but doesn't matter. ASI kicked in and changed your code to:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// &lt;-- ASI</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because of ASI, the compiler places a semicolon after the return keyword and therefore it returns <code class=\"language-text\">undefined</code> without an error being thrown.</p>\n<br>\n<h2>Special characters</h2>\n<p>If you don't use semicolons, never start a line with <code class=\"language-text\">[</code>, <code class=\"language-text\">(</code>, <code class=\"language-text\">,</code>, <code class=\"language-text\">*</code>, <code class=\"language-text\">/</code>, <code class=\"language-text\">,</code>, <code class=\"language-text\">.</code>, <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ✖︎︎ problem</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'hey, yo!'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✔ solution</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'hey, yo!'</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ✖︎︎ problem</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> dude <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✔ solution</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> dude <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ✖︎︎ problem</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hey bro</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'o'</span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✔ solution</span>\n<span class=\"token punctuation\">;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hey bro</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'o'</span> <span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"date":"February 25, 2021","slug":"/pill/semicolon-usage","title":"Semicolon usage","author":"Jorge Baumann"}}},"pageContext":{"slug":"/pill/semicolon-usage"}},"staticQueryHashes":["2744294623","63159454"]}