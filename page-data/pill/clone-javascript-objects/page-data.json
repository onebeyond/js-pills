{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/clone-javascript-objects","result":{"data":{"markdownRemark":{"html":"<h1>Clone Javascript Objects</h1>\n<p>Objects in Javascript are references values, so you can't just copy using assing operator <code class=\"language-text\">=</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> car1<span class=\"token punctuation\">;</span>\ncar2<span class=\"token punctuation\">.</span>doors <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 2, color: 'blue' };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 2, color: 'blue' }; ðŸ‘€</span></code></pre></div>\n<p>I changed <code class=\"language-text\">car2</code> but <code class=\"language-text\">car1</code> also affected. It's because, when you use <code class=\"language-text\">=</code>, really you are copied the pointer to the memory space it occupies. Reference types don't hold values, they are a pointer to the value in memory. To achive <em>real</em> clone, here are 2 ways:</p>\n<h2>Shallow clone</h2>\n<p>It makes a superficial clone of an object</p>\n<h4>Using Object.assing</h4>\n<p>The oldest way to do it. How we want clone an object, we start with empty object <code class=\"language-text\">{}</code> for source</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar2<span class=\"token punctuation\">.</span>doors <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 2, color: 'blue' };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue' }; âœ…</span></code></pre></div>\n<h4>Using Spread Operator</h4>\n<p>Since ECMAScript 6, we have available spread operator <code class=\"language-text\">...</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>car1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncar2<span class=\"token punctuation\">.</span>doors <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 2, color: 'blue' };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue' }; âœ…</span></code></pre></div>\n<p>But remember, this way do a shallow clone. It means that, if you have nested objects, they won't be cloned and we'll have a reference again</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncar1<span class=\"token punctuation\">.</span>specs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">speed</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">longitude</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>car1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncar2<span class=\"token punctuation\">.</span>specs<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 150, longitude: 100} };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 150, longitude: 100} };  ðŸ‘€</span></code></pre></div>\n<h2>Deep clone:</h2>\n<p>If we've interested on cloning nested objects too, we need a deep clone</p>\n<h4>Using JSON</h4>\n<p>This is a quick dirty way to get a deep clone. It has native support, so you don't need external deps. In practice, it is used more than it seems</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">specs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">speed</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">longitude</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar2<span class=\"token punctuation\">.</span>specs<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 150, longitude: 100} };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 100, longitude: 100} };  âœ…</span></code></pre></div>\n<p>But not everything is so good. JSON method doesn't work with functions and order of properties in the cloned object may be different</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">specs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">speed</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">longitude</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncar1<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">paint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> newColor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 100, longitude: 100}, paint: f };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 100, longitude: 100} };  ðŸ‘€</span></code></pre></div>\n<h3>Using external library</h3>\n<p>There are a lot of libraries (or you can create yourself ðŸ˜Ž) that have a method for deep cloning. The most famous for me is <code class=\"language-text\">lodash</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> cloneDeep <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> car1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">doors</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">specs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">speed</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">longitude</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">paint</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> newColor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 100, longitude: 100}, paint: f };</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ doors: 4, color: 'blue', specs: { speed: 100, longitude: 100}, paint: f };  âœ…</span></code></pre></div>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://www.samanthaming.com/tidbits/70-3-ways-to-clone-objects/\">Samantha Ming Tidbits: 3 Ways to Clone Objects in JavaScript</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">MDN spread operator doc</a></li>\n<li><a href=\"https://lodash.com/docs/4.17.15#cloneDeep\">Lodash cloneDeep doc</a></li>\n</ul>","frontmatter":{"date":"October 16, 2020","slug":"/pill/clone-javascript-objects","title":"Clone Javascript Objects","author":""}}},"pageContext":{"slug":"/pill/clone-javascript-objects"}},"staticQueryHashes":["2744294623","63159454"]}