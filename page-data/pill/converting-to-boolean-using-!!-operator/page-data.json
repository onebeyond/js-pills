{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/converting-to-boolean-using-!!-operator","result":{"data":{"markdownRemark":{"html":"<h1>Converting to boolean using <code class=\"language-text\">!!</code> operator</h1>\n<h3>What is a boolean Value?</h3>\n<p>JavaScript has a Boolean data type. It can <strong>only</strong> take the values true or false, like YES/NO or ON/OFF</p>\n<h3>But, what is true and what is false?</h3>\n<p>JavaScript is very flexible about the types of values it requires. If JavaScript wants a boolean, it will convert whatever value you give it to a boolean.</p>\n<p>Some values (“truthy” values) convert to true and others (“falsy” values) convert to false.</p>\n<h1>❎ False</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0</span> <span class=\"token operator\">-</span> <span class=\"token comment\">// false</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">0n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h1>✅ True</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">true</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">42</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">-</span><span class=\"token number\">13.3</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">Infinity</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">-</span><span class=\"token number\">Infinity</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// true ❗</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// true ❗</span>\n<span class=\"token string\">\"false\"</span> <span class=\"token comment\">// true ❗</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token comment\">// true ❗</span>\n<span class=\"token string\">\" \"</span> <span class=\"token comment\">// true ❗</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h3>Then, What !! is for?</h3>\n<p>A single “!” symbol in Javascript, also called a “bang”, is the logical “not” operator. If you place this operator in front of a value, it will converse it to boolean and reverse the value, returning the opposite. So, running a bang twice determines the opposite of value, and then returns the opposite of that.</p>\n<p>(So <code class=\"language-text\">!!</code> is not an operator, is just the <code class=\"language-text\">!</code> operator used twice)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return false</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return true</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return false, NaN is falsy</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// return false, undefined is falsy</span>\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return false</span></code></pre></div>\n<h3>An example please</h3>\n<p>Sometimes you need to check whether the value of a variable exists and whether it is valid, so that in these cases we consider them true.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cash</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cash <span class=\"token operator\">=</span> cash<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasMoney <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>cash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span>cash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100.50</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">.</span>hasMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">let</span> emptyAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankAccount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emptyAccount<span class=\"token punctuation\">.</span>cash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emptyAccount<span class=\"token punctuation\">.</span>hasMoney<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<br/>\n<h3>Combination with &#x26;&#x26; operator</h3>\n<p>When you use <code class=\"language-text\">&amp;&amp;</code> operator, if the first object is falsy, it returns that object</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 0</span>\n\n<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ false</span></code></pre></div>\n<h3>A real life example please</h3>\n<p><code class=\"language-text\">!!</code> Might be useful when libraries expect explicit Boolean values, for instance React ⚛️</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  jobs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>CardJob job<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>job<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  jobs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>No jobs to show<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>⚠️ if jobs.length = 0, it will return 0, so te correct way is:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">!</span><span class=\"token operator\">!</span>jobs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>CardJob job<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>job<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n  jobs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>No jobs to show<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You also probably used <code class=\"language-text\">foo > 0</code> or <code class=\"language-text\">foo != \"\"</code> for the same cases</p>\n<h2>And what about boolean()?</h2>\n<p>The result is the same, but according to this test looks like !! is faster than boolean()\n<a href=\"https://jsperf.com/bool-not-not\">Test !! vs boolean()</a></p>\n<h2>⛔ Never use object new boolean()</h2>\n<p>Do not create Boolean objects. It slows down execution speed.\nThe new keyword complicates the code. This produce unexpected results</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://www.samanthaming.com/tidbits/19-2-ways-to-convert-to-boolean/\">Samantha Ming Tidbits: 2 Ways to Convert Values to Boolean in JavaScript</a></li>\n<li><a href=\"https://andela.com/insights/javascript-convert-to-boolean-using-double-bangoperator/\">Andela: Javascript convert to boolean using !!(double bang)operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript/1406621\">stackoverflow: What is the !! (not not) operator in JavaScript?</a></li>\n<li><a href=\"https://techy360.com/11-useful-javascript-tips-and-tricks/\">techy360: 11 useful JavaScript tips and tricks</a></li>\n</ul>","frontmatter":{"date":"July 30, 2020","slug":"/pill/converting-to-boolean-using-!!-operator","title":"Converting to boolean using `!!` operator","author":""}}},"pageContext":{"slug":"/pill/converting-to-boolean-using-!!-operator"}},"staticQueryHashes":["2744294623","63159454"]}