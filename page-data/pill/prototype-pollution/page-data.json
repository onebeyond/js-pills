{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/prototype-pollution","result":{"data":{"markdownRemark":{"html":"<h1>Prevent prototype pollution</h1>\n<h3>Whats a prototype?</h3>\n<p>Prototypes are the mechanism by which JavaScript objects inherit features from one another.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Character</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">mover</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dx<span class=\"token punctuation\">,</span> dy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> dx<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> dy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np1<span class=\"token punctuation\">.</span><span class=\"token function\">mover</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>In this example the function <code class=\"language-text\">Character</code>, javascript will create automatically a <code class=\"language-text\">prototype</code> object, which contains a <code class=\"language-text\">constructor</code> property with the Character function <code class=\"language-text\">constructor: Character(x, y)</code>.\nWhen you create a new instance of Character with the reserved word <code class=\"language-text\">new</code>, the new created objects will inherit all the properties of <code class=\"language-text\">Character</code>.</p>\n<h3>Whats a prototype pollution?</h3>\n<p>In JavaScript you can altered all Object attributes such as <em>proto</em>, constructor and prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>polluted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>polluted<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values. Properties on the <code class=\"language-text\">Object.prototype</code> are then inherited by all the JavaScript objects through the prototype chain.</p>\n<p>One main ways in which the pollution of prototypes occurs due to unsafe Object recursive merge</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> firstObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firstObject Before Polluting : '</span> <span class=\"token operator\">+</span> firstObj<span class=\"token punctuation\">.</span>Check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// firstObject Before Polluting : undefined</span>\n\n<span class=\"token keyword\">let</span> secondObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n  firstObj<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{ \"__proto__\": { \"Check\": \"polluted\"} }'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firstObject After Polluting: '</span> <span class=\"token operator\">+</span> firstObj<span class=\"token punctuation\">.</span>Check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// firstObject After Polluting: polluted</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'secondObject After Polluting: '</span> <span class=\"token operator\">+</span> secondObj<span class=\"token punctuation\">.</span>Check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// secondObject After Polluting: polluted</span></code></pre></div>\n<h3>What are the consequences?</h3>\n<p>Prototype pollution can lead to practically all popular web vulnerabilities: remote code execution (RCE), cross-site scripting (XSS), SQL injection, ...</p>\n<p>On web browsers, prototype pollution commonly leads to XSS attacks. In 2019, a prototype pollution bug found in JavaScript library jQuery left many web applications vulnerable to such assaults.</p>\n<h3>How to prevent it?</h3>\n<ul>\n<li>\n<p><strong>Object.create(null):</strong>\nIt’s possible to create object in JavaScript that don’t have any prototype. It requires the usage of the Object.create function. Object created through this API won’t have the <strong>proto</strong> and constructor attributes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nobj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n</li>\n<li>\n<p><strong>Freezing the prototype:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n</li>\n<li>\n<p><strong>Schema validation of JSON input:</strong>\nMultiple library on npm (ej.: <a href=\"https://www.npmjs.com/package/ajv\">ajv</a> ) offer schema validation for JSON data. Schema validation ensure that the JSON data contains all the expected attributes with the appropriate type.</p>\n</li>\n<li>\n<p><strong>Using Map instead of Object:</strong>\nA Map object iterates its elements in insertion order — a for...of loop returns an array of [key, value] for each iteration. similar to an object but without all the security caveats</p>\n</li>\n</ul>\n<p>Reference:</p>\n<ul>\n<li><a href=\"https://youtu.be/2GLXIUv8hmM?t=2693\">https://youtu.be/2GLXIUv8hmM?t=2693</a></li>\n<li><a href=\"https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf\">https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf</a></li>\n<li><a href=\"https://stackoverflow.com/questions/57780961/how-to-prevent-prototype-pollution-in-javascript\">https://stackoverflow.com/questions/57780961/how-to-prevent-prototype-pollution-in-javascript</a></li>\n</ul>","frontmatter":{"date":"October 04, 2021","slug":"/pill/prototype-pollution","title":"Prototype pollution","author":"Giorgio Grassini"}}},"pageContext":{"slug":"/pill/prototype-pollution"}},"staticQueryHashes":["2744294623","63159454"]}