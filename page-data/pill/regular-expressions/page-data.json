{"componentChunkName":"component---src-templates-pill-template-index-js","path":"/pill/regular-expressions","result":{"data":{"markdownRemark":{"html":"<h1>ReGex <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">MDN</a></h1>\n<p>A regular expression is a sequence of characters that specifies a search pattern.</p>\n<h2>Used to</h2>\n<ol>\n<li>Validate Text.</li>\n<li>Search through Text.</li>\n</ol>\n<h2>Create a regular expression</h2>\n<ol>\n<li>Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>Or calling the constructor function of the RegExp object:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>Using regular expressions in JavaScript</h1>\n<p>Regular expressions are used with the RegExp methods test() and exec() and with the String methods match(), replace(), search(), and split().</p>\n<ul>\n<li>\n<p><code class=\"language-text\">exec()</code> Executes a search for a match in a string. It returns an <em>array</em> of information or <em>null</em> on a mismatch.</p>\n</li>\n<li>\n<p><code class=\"language-text\">test()</code> Tests for a match in a string. It returns <em>true</em> or <em>false</em>.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p><code class=\"language-text\">match()</code> Returns an <em>array</em> containing all of the matches, including capturing groups, or <em>null</em> if no match is found.</p>\n</li>\n<li>\n<p><code class=\"language-text\">matchAll()</code> Returns an <em>iterator</em> containing all of the matches, including capturing groups.</p>\n</li>\n<li>\n<p><code class=\"language-text\">search()</code> Tests for a match in a <em>string</em>. It returns the index of the match, or -1 if the search fails.</p>\n</li>\n<li>\n<p><code class=\"language-text\">replace()</code> Executes a search for a match in a <em>string</em>, and replaces the matched substring with a replacement substring.</p>\n</li>\n<li>\n<p><code class=\"language-text\">replaceAll()</code> Executes a search for all matches in a <em>string</em>, and replaces the matched substrings with a replacement substring.</p>\n</li>\n<li>\n<p><code class=\"language-text\">split()</code> Uses a regular expression or a fixed <em>string</em> to break a string into an array of substrings.</p>\n</li>\n</ul>\n<h1>Using groups property</h1>\n<p>When we have a String which we know has a format, we can collect the parts that make up the string to separate it into different variables for our future operations.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">RE_DATE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]{4})-([0-9]{2})-([0-9]{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> matchObj <span class=\"token operator\">=</span> <span class=\"token constant\">RE_DATE</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1999-12-31'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> year <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1999</span>\n<span class=\"token keyword\">const</span> month <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n<span class=\"token keyword\">const</span> day <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 31</span></code></pre></div>\n<p>Referring to capture groups via numbers has several disadvantages:</p>\n<ul>\n<li>Finding the number of a capture group is a hassle: you have to count parentheses.</li>\n<li>You need to see the regular expression if you want to understand what the groups are for.</li>\n<li>If you change the order of the capture groups, you also have to change the matching code.</li>\n</ul>\n<p>However, capture groups are an all-around superior solution. Which is about identifying capture groups via names.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">RE_DATE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> matchObj <span class=\"token operator\">=</span> <span class=\"token constant\">RE_DATE</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1999-12-31'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> year <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1999</span>\n<span class=\"token keyword\">const</span> month <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\n<span class=\"token keyword\">const</span> day <span class=\"token operator\">=</span> matchObj<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 31</span></code></pre></div>\n<p>We can combine other functions, for example the <code class=\"language-text\">replace()</code> and named capture groups</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">RE_DATE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1999-12-31'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">RE_DATE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">g0<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>offset<span class=\"token punctuation\">,</span>input<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">// (A)</span>\n        month<span class=\"token operator\">+</span><span class=\"token string\">'/'</span><span class=\"token operator\">+</span>day<span class=\"token operator\">+</span><span class=\"token string\">'/'</span><span class=\"token operator\">+</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 12/31/1999</span></code></pre></div>\n<p>We can do the same thing with telephone numbers, dates, emails, sites, etc.</p>","frontmatter":{"date":"January 18, 2022","slug":"/pill/regular-expressions","title":"RegEx: basic functions and groups property","author":"Hamsa Aldrobi"}}},"pageContext":{"slug":"/pill/regular-expressions"}},"staticQueryHashes":["2744294623","63159454"]}